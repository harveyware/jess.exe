getgenv().rizzyLock = false
getgenv().camLockEnabled = false

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")
local config = {
    aimFOV = 150,
    responseTime = 0.5,
    predictionTime = 0.134,
    autoClickThreshold = 0,
    groundThreshold = 0,
    smoothness = 0.10,
    maxSmoothnessSpeed = 0.5,
    radius = 600,
    humanizedMovement = false,
    randomnessFactor = 0.2,
    shakeFactor = 0.0, 
    distanceThreshold = 50,
    interpolationFactorMin = 1,
    interpolationFactorMax = 1,
    targetPriority = true,
    jumpReactionDelay = 0.5
}

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local target
local lastToggleTime = 0
local lastJumpTime = 0
local lastKnownPosition = nil
local StarterGui = game:GetService("StarterGui")

function getClosestTarget()
    local closestTarget = nil
    local shortestDistance = config.aimFOV

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPart = otherPlayer.Character.HumanoidRootPart
            local screenPoint = workspace.CurrentCamera:WorldToScreenPoint(targetPart.Position)
            local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude

            if distance < config.radius and distance < shortestDistance then
                closestTarget = targetPart
                shortestDistance = distance
            end
        end
    end

    return closestTarget
end

function advancedPredictTargetPosition(targetPart, deltaTime)
    local targetVelocity = targetPart.Velocity
    local targetPosition = targetPart.Position
    local acceleration = (targetVelocity - (targetPart.Velocity - targetPart.AssemblyLinearVelocity * deltaTime)) / deltaTime
    local predictedPosition = targetPosition + targetVelocity * config.predictionTime + 0.5 * acceleration * config.predictionTime ^ 2
    local ray = Ray.new(predictedPosition, Vector3.new(0, -1, 0) * config.groundThreshold)
    local hitPart, hitPos = workspace:FindPartOnRay(ray)

    if hitPart then
        predictedPosition = hitPos
    end

    return predictedPosition
end

function toggleCamLock()
    local currentTime = tick()
    
    if getgenv().rizzyLock then
        if currentTime - lastToggleTime >= config.responseTime then
            getgenv().camLockEnabled = not getgenv().camLockEnabled

            if getgenv().camLockEnabled then
                target = getClosestTarget()
            else
                target = nil
            end

            lastToggleTime = currentTime
        end
    end
end

function onInputBegan(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.E and not gameProcessed then
        toggleCamLock()
    end
end

function onRenderStep(deltaTime)
    if getgenv().camLockEnabled then
        local camera = workspace.CurrentCamera
        local cameraPos = camera.CFrame.Position

        if target and target:IsDescendantOf(workspace) then
            local targetCharacter = target.Parent
            local humanoid = targetCharacter:FindFirstChildOfClass("Humanoid")

            if humanoid and humanoid:GetState() == Enum.HumanoidStateType.Jumping then
                if tick() - lastJumpTime < config.jumpReactionDelay then
                    if lastKnownPosition then
                        local targetCFrame = CFrame.new(cameraPos, lastKnownPosition)
                        camera.CFrame = camera.CFrame:Lerp(targetCFrame, config.smoothness)
                    end
                    return
                else
                    lastJumpTime = tick()
                    lastKnownPosition = target.Position
                end
            end

            local predictedPosition = advancedPredictTargetPosition(target, deltaTime)
            local targetCFrame = CFrame.new(cameraPos, predictedPosition)
            local distanceToTarget = (predictedPosition - cameraPos).magnitude
            local interpolationFactor = math.clamp(distanceToTarget / config.distanceThreshold, config.interpolationFactorMin, config.interpolationFactorMax)
            local currentSmoothness = config.smoothness + (config.maxSmoothnessSpeed - config.smoothness) * interpolationFactor

            local randomOffset = Vector3.new(
                math.random() * config.randomnessFactor - config.randomnessFactor / 2,
                math.random() * config.randomnessFactor - config.randomnessFactor / 2,
                math.random() * config.randomnessFactor - config.randomnessFactor / 2
            )
            targetCFrame = targetCFrame * CFrame.new(randomOffset)

            camera.CFrame = camera.CFrame:Lerp(targetCFrame, currentSmoothness)
        end
    end
end

UserInputService.InputBegan:Connect(onInputBegan)
RunService.RenderStepped:Connect(onRenderStep)
